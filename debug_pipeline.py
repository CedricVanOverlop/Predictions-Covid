"""
Script de d√©bogage pour identifier pourquoi le pipeline ne fonctionne pas
"""

import os
import sys
from pathlib import Path

def debug_step_by_step():
    """D√©bogue chaque √©tape du pipeline individuellement"""
    print("üîç D√âBOGAGE √âTAPE PAR √âTAPE")
    print("="*50)
    
    # √âtape 1: V√©rifier la structure des fichiers
    print("\n1Ô∏è‚É£ V√âRIFICATION DE LA STRUCTURE")
    print("-"*30)
    
    required_modules = [
        "Data_Processing/data_downloader.py",
        "Data_Processing/data_loader.py", 
        "Data_Processing/savitzky_golay.py",
        "geography/dijkstra.py",
        "markov_model/Prediction.py",
        "config/settings.json",
        "main.py"
    ]
    
    missing_modules = []
    for module in required_modules:
        if os.path.exists(module):
            print(f"‚úÖ {module}")
        else:
            print(f"‚ùå {module}")
            missing_modules.append(module)
    
    if missing_modules:
        print(f"\n‚ö†Ô∏è {len(missing_modules)} fichiers manquants !")
        return False
    
    # √âtape 2: Tester l'import des modules
    print("\n2Ô∏è‚É£ TEST D'IMPORT DES MODULES")
    print("-"*30)
    
    try:
        sys.path.append('.')
        from Data_Processing.data_downloader import test_export_download
        print("‚úÖ data_downloader import√©")
    except Exception as e:
        print(f"‚ùå data_downloader: {e}")
        return False
    
    try:
        from Data_Processing.data_loader import load_covid_data_pipeline
        print("‚úÖ data_loader import√©")
    except Exception as e:
        print(f"‚ùå data_loader: {e}")
        return False
    
    try:
        from Data_Processing.savitzky_golay import smooth_covid_data
        print("‚úÖ savitzky_golay import√©")
    except Exception as e:
        print(f"‚ùå savitzky_golay: {e}")
        return False
    
    # √âtape 3: Tester le t√©l√©chargement des donn√©es
    print("\n3Ô∏è‚É£ TEST DE T√âL√âCHARGEMENT")
    print("-"*30)
    
    try:
        print("üåê Tentative de t√©l√©chargement...")
        result = test_export_download()
        if result and os.path.exists(result):
            print(f"‚úÖ T√©l√©chargement r√©ussi: {result}")
        else:
            print(f"‚ùå T√©l√©chargement √©chou√©")
            return False
    except Exception as e:
        print(f"‚ùå Erreur t√©l√©chargement: {e}")
        return False
    
    # √âtape 4: V√©rifier le fichier t√©l√©charg√©
    print("\n4Ô∏è‚É£ V√âRIFICATION DU FICHIER T√âL√âCHARG√â")
    print("-"*30)
    
    possible_files = [
        "Data/COVID19BE_CASES_MUNI.json",
        "COVID19BE_CASES_MUNI.json",
        "data/COVID19BE_CASES_MUNI.json"
    ]
    
    data_file = None
    for file_path in possible_files:
        if os.path.exists(file_path):
            data_file = file_path
            print(f"‚úÖ Fichier trouv√©: {file_path}")
            break
    
    if not data_file:
        print("‚ùå Aucun fichier de donn√©es trouv√©")
        return False
    
    # V√©rifier le contenu du fichier
    try:
        import json
        with open(data_file, 'r', encoding='utf8') as f:
            data = json.load(f)
        
        print(f"üìä Fichier contient {len(data)} enregistrements")
        
        # V√©rifier la structure
        if isinstance(data, list) and len(data) > 0:
            first_record = data[0]
            required_fields = ['DATE', 'TX_DESCR_FR', 'CASES']
            
            for field in required_fields:
                if field in first_record:
                    print(f"‚úÖ Champ {field} pr√©sent")
                else:
                    print(f"‚ùå Champ {field} manquant")
                    return False
        else:
            print("‚ùå Structure de donn√©es invalide")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur lecture fichier: {e}")
        return False
    
    print("\n‚úÖ Toutes les v√©rifications pass√©es !")
    return True

def test_data_loader_individually():
    """Teste sp√©cifiquement le data_loader"""
    print("\nüîÑ TEST SP√âCIFIQUE DU DATA_LOADER")
    print("-"*40)
    
    try:
        from Data_Processing.data_loader import load_covid_data_pipeline
        
        # Chercher le fichier de donn√©es
        data_files = [
            "Data/COVID19BE_CASES_MUNI.json",
            "COVID19BE_CASES_MUNI.json",
            "data/COVID19BE_CASES_MUNI.json"
        ]
        
        data_file = None
        for file_path in data_files:
            if os.path.exists(file_path):
                data_file = file_path
                break
        
        if not data_file:
            print("‚ùå Aucun fichier de donn√©es trouv√© pour le data_loader")
            return False
        
        print(f"üìÑ Utilisation du fichier: {data_file}")
        
        # Ex√©cuter le pipeline
        result = load_covid_data_pipeline(data_file)
        
        if result:
            print("‚úÖ Data loader termin√© avec succ√®s")
            return True
        else:
            print("‚ùå Data loader a √©chou√©")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur dans data_loader: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_each_step_individually():
    """Teste chaque √©tape individuellement avec gestion d'erreur"""
    print("\nüß™ TEST INDIVIDUEL DE CHAQUE √âTAPE")
    print("="*50)
    
    steps = [
        ("t√©l√©chargement", test_download_step),
        ("data_loader", test_data_loader_step),
        ("lissage", test_smoothing_step),
        ("g√©ographie", test_geography_step),
        ("markov", test_markov_step)
    ]
    
    results = {}
    
    for step_name, step_function in steps:
        print(f"\nüîß Test: {step_name}")
        print("-" * 20)
        
        try:
            success = step_function()
            results[step_name] = success
            if success:
                print(f"‚úÖ {step_name} r√©ussi")
            else:
                print(f"‚ùå {step_name} √©chou√©")
        except Exception as e:
            print(f"‚ùå {step_name} erreur: {e}")
            results[step_name] = False
    
    # R√©sum√©
    print(f"\nüìä R√âSUM√â DES TESTS")
    print("-" * 20)
    for step_name, success in results.items():
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {step_name}")
    
    return results

def test_download_step():
    """Teste uniquement l'√©tape de t√©l√©chargement"""
    try:
        from Data_Processing.data_downloader import test_export_download
        
        # Cr√©er le dossier Data s'il n'existe pas
        os.makedirs("Data", exist_ok=True)
        
        result = test_export_download()
        return result is not None and os.path.exists(result if result else "")
    except Exception as e:
        print(f"Erreur t√©l√©chargement: {e}")
        return False

def test_data_loader_step():
    """Teste uniquement l'√©tape de data_loader"""
    try:
        # V√©rifier qu'on a un fichier de donn√©es
        data_files = ["Data/COVID19BE_CASES_MUNI.json", "COVID19BE_CASES_MUNI.json"]
        data_file = None
        
        for file_path in data_files:
            if os.path.exists(file_path):
                data_file = file_path
                break
        
        if not data_file:
            print("Pas de fichier de donn√©es pour data_loader")
            return False
        
        from Data_Processing.data_loader import load_covid_data_pipeline
        result = load_covid_data_pipeline(data_file)
        
        # V√©rifier que le fichier de sortie a √©t√© cr√©√©
        expected_output = "data/raw_covid_data_19communes.json"
        return os.path.exists(expected_output)
        
    except Exception as e:
        print(f"Erreur data_loader: {e}")
        return False

def test_smoothing_step():
    """Teste uniquement l'√©tape de lissage"""
    try:
        # V√©rifier qu'on a les donn√©es d'entr√©e
        input_file = "data/raw_covid_data_19communes.json"
        if not os.path.exists(input_file):
            print("Pas de fichier d'entr√©e pour le lissage")
            return False
        
        from Data_Processing.savitzky_golay import smooth_covid_data
        result = smooth_covid_data()
        
        return result is not None and os.path.exists("data/smoothed_data.json")
        
    except Exception as e:
        print(f"Erreur lissage: {e}")
        return False

def test_geography_step():
    """Teste uniquement l'√©tape g√©ographique"""
    try:
        from geography.dijkstra import test_dijkstra
        test_dijkstra()
        
        return os.path.exists("data/geographic_weights.json")
        
    except Exception as e:
        print(f"Erreur g√©ographie: {e}")
        return False

def test_markov_step():
    """Teste uniquement l'√©tape Markov"""
    try:
        # V√©rifier les pr√©requis
        required_files = [
            "data/smoothed_data.json",
            "data/geographic_weights.json"
        ]
        
        for file_path in required_files:
            if not os.path.exists(file_path):
                print(f"Fichier requis manquant: {file_path}")
                return False
        
        from markov_model.Prediction import test_matrix_markov
        test_matrix_markov()
        
        return os.path.exists("data/matrix_markov_models.json")
        
    except Exception as e:
        print(f"Erreur Markov: {e}")
        return False

def quick_fix_attempt():
    """Tentative de correction rapide"""
    print("\nüöÄ TENTATIVE DE CORRECTION RAPIDE")
    print("="*40)
    
    # 1. Cr√©er tous les dossiers n√©cessaires
    print("üìÅ Cr√©ation des dossiers...")
    os.makedirs("data", exist_ok=True)
    os.makedirs("Data", exist_ok=True)
    os.makedirs("visualizations", exist_ok=True)
    
    # 2. Tester √©tape par √©tape
    return test_each_step_individually()

if __name__ == "__main__":
    print("üîç OUTIL DE D√âBOGAGE PIPELINE COVID-19")
    print("="*50)
    
    print("\nQue voulez-vous faire ?")
    print("1. D√©bogage complet √©tape par √©tape")
    print("2. Test rapide de chaque module")
    print("3. Tentative de correction automatique")
    
    choice = input("\nVotre choix (1-3): ").strip()
    
    if choice == "1":
        debug_step_by_step()
    elif choice == "2":
        test_each_step_individually()
    elif choice == "3":
        quick_fix_attempt()
    else:
        print("Choix invalide, d√©marrage du d√©bogage complet...")
        debug_step_by_step()